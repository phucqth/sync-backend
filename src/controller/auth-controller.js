import jwt from 'jsonwebtoken';
import 'dotenv/config';
import redisClient from '@utils/redis-client.js';
import { v4 as uuidv4 } from 'uuid';
import Boom from 'boom';

const authenticateToken = async (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (token === null) return res.sendStatus(401);
    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);

        const isTokenInBlacklist = await redisClient.get(
            `TOKEN_BLACKLIST_${decoded.username}_${decoded.jti}`
        );
        if (isTokenInBlacklist) {
            return res.send(Boom.unauthorized());
        }
        req.user = decoded;
        // next();
    } catch (error) {
        res.status(401).send({ message: 'Invalid Token' });
    }
};
const login = (req, reply) => {
    const { username, password } = req.body;

    if (1 === 1) {
        const payload = {
            username,
            jti: uuidv4(),
            iat: Math.floor(Date.now() / 1000),
            role: 'user',
        };

        const token = jwt.sign(payload, process.env.JWT_SECRET, {
            expiresIn: '1h',
        });

        reply.status(200).send({
            token,
            user: {
                username,
                role: 'user',
            },
        });
    } else {
        reply.status(401).send({ message: 'Invalid credentials' });
    }
};

const logout = (req, reply) => {
    redisClient.set(`TOKEN_BLACKLIST_${req.user.username}_${req.user.jti}`, 1);
    reply.status(200).send({ message: 'Logout successful' });
};

const renewAccessToken = async (req, reply) => {
    const token = req.headers['x-refresh-token'];
    if (!token)
        return reply.status(400).send({ message: 'Refresh token is required' });

    const decoded = jwt.verify(token, process.env.JWT_REFRESH_SECRET);

    const isTokenInBlacklist = await redisClient.get(
        `TOKEN_BLACKLIST_${decoded.username}_${decoded.jti}`
    );
    if (isTokenInBlacklist) {
        return reply.status(401).send({ message: 'Refresh token is revoked' });
    }

    const numberOfTokens = await redisClient.get(
        `TOKEN_COUNT_${decoded.username}`
    );
    if (numberOfTokens > 5) {
        // detect hacker token?
        // revoke all token generated by this user
        await redisClient.set(`TOKEN_BLACKLIST_${decoded.username}_*`, 1);
        return reply.status(403).send({
            message: 'All tokens are revoked. Please contact the administrator',
        });
    }

    await redisClient.set(
        `TOKEN_COUNT_${decoded.username}`,
        numberOfTokens + 1
    );
};
const checkRole = async (req, res, next) => {
    if (req.user?.role !== 'admin')
        return res.status(403).send({ message: 'Forbidden' });
    next();
};
export { authenticateToken, checkRole, logout, login };
